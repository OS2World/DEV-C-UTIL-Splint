
repexpose.c: (in function abst_create)
repexpose.c:8:4: Arrow access from possibly null pointer a: a->name
   repexpose.c:5:12: Storage a may become null
repexpose.c:13:3: Possible undocumented modification of p->parent through alias
                     a->parent: a->parent = b->parent
repexpose.c:16:3: Unqualified storage *globstring assigned to implicitly only:
                     a->name = *globstring
repexpose.c:17:3: Kept storage *globstring assigned to implicitly only:
                     b->name = *globstring
   repexpose.c:16:3: Storage *globstring becomes kept
repexpose.c:19:10: Storage a->name reachable from return value is kept (should
                      be implicitly only)
   repexpose.c:17:3: Storage a->name becomes kept
repexpose.c:19:10: Returned storage *a contains 1 undefined field: im
repexpose.c:19:12: Storage *globstring reachable from global is kept (should be
                      unqualified)
   repexpose.c:16:3: Storage *globstring becomes kept
repexpose.c: (in function abst_name)
repexpose.c:26:18: Released storage a->name reachable from parameter at return
                      point
   repexpose.c:26:10: Storage a->name released
repexpose.c: (in function abst_parent)
repexpose.c:45:15: Dependent storage b->parent returned as only: b->parent
repexpose.c:45:25: Only storage a not released before return
   repexpose.c:40:24: Storage a becomes only
repexpose.c: (in function immut_name)
repexpose.c:51:10: Only storage im->name returned as dependent: (im->name)
repexpose.c: (in function abst_setIm)
repexpose.c:57:3: Undocumented modification of a->im: a->im = im

Finished checking --- 12 code warnings, as expected

repexpose.c: (in function abst_create)
repexpose.c:8:4: Arrow access from possibly null pointer a: a->name
   repexpose.c:5:12: Storage a may become null
repexpose.c:13:3: Possible undocumented modification of p->parent through alias
                     a->parent: a->parent = b->parent
repexpose.c:16:3: Unqualified storage *globstring assigned to implicitly only:
                     a->name = *globstring
repexpose.c:17:3: Kept storage *globstring assigned to implicitly only:
                     b->name = *globstring
   repexpose.c:16:3: Storage *globstring becomes kept
repexpose.c:19:10: Storage a->name reachable from return value is kept (should
                      be implicitly only)
   repexpose.c:17:3: Storage a->name becomes kept
repexpose.c:19:10: Returned storage *a contains 1 undefined field: im
repexpose.c:19:12: Storage *globstring reachable from global is kept (should be
                      unqualified)
   repexpose.c:16:3: Storage *globstring becomes kept
repexpose.c: (in function abst_name)
repexpose.c:26:10: Function returns reference to parameter a: a->name
repexpose.c:26:18: Released storage a->name reachable from parameter at return
                      point
   repexpose.c:26:10: Storage a->name released
repexpose.c: (in function abst_aval)
repexpose.c:37:10: Function returns reference to parameter a: (&(a->val))
repexpose.c: (in function abst_parent)
repexpose.c:45:15: Dependent storage b->parent returned as only: b->parent
repexpose.c:45:25: Only storage a not released before return
   repexpose.c:40:24: Storage a becomes only
repexpose.c: (in function immut_name)
repexpose.c:51:10: Only storage im->name returned as dependent: (im->name)
repexpose.c:51:10: Function returns reference to parameter im: (im->name)
repexpose.c: (in function abst_setIm)
repexpose.c:57:3: Undocumented modification of a->im: a->im = im

Finished checking --- 15 code warnings, as expected

repexpose.c: (in function abst_create)
repexpose.c:8:4: Arrow access from possibly null pointer a: a->name
   repexpose.c:5:12: Storage a may become null
repexpose.c:10:3: Assignment of mutable parameter p to component of abstract
                     type abst exposes rep: a->parent = p
repexpose.c:11:3: Assignment of mutable parameter p (through alias b) to
                     component of abstract type abst exposes rep: a->parent = b
repexpose.c:12:3: Assignment of mutable component of parameter p to component
                     of abstract type abst exposes rep: a->parent = p->parent
repexpose.c:13:3: Possible undocumented modification of p->parent through alias
                     a->parent: a->parent = b->parent
repexpose.c:13:3: Assignment of mutable component of parameter p (through alias
    b->parent) to component of abstract type abst exposes rep:
    a->parent = b->parent
repexpose.c:16:3: Assignment of global globstring to component of abstract type
                     abst exposes rep: a->name = *globstring
repexpose.c:16:3: Unqualified storage *globstring assigned to implicitly only:
                     a->name = *globstring
repexpose.c:17:3: Assignment of global globstring to component of abstract type
                     abst exposes rep: b->name = *globstring
repexpose.c:17:3: Kept storage *globstring assigned to implicitly only:
                     b->name = *globstring
   repexpose.c:16:3: Storage *globstring becomes kept
repexpose.c:19:10: Storage a->name reachable from return value is kept (should
                      be implicitly only)
   repexpose.c:17:3: Storage a->name becomes kept
repexpose.c:19:10: Returned storage *a contains 1 undefined field: im
repexpose.c:19:12: Storage *globstring reachable from global is kept (should be
                      unqualified)
   repexpose.c:16:3: Storage *globstring becomes kept
repexpose.c: (in function abst_name)
repexpose.c:26:10: Function returns reference to parameter a: a->name
repexpose.c:26:10: Return value exposes rep of abst: a->name
repexpose.c:26:18: Released storage a->name reachable from parameter at return
                      point
   repexpose.c:26:10: Storage a->name released
repexpose.c: (in function abst_aval)
repexpose.c:37:10: Function returns reference to parameter a: (&(a->val))
repexpose.c:37:10: Return value exposes rep of abst: (&(a->val))
repexpose.c: (in function abst_parent)
repexpose.c:45:15: Dependent storage b->parent returned as only: b->parent
repexpose.c:45:15: Return value exposes rep of abst: b->parent
repexpose.c:45:15: Return value may expose rep of abst through alias a:
                      b->parent
repexpose.c:45:25: Only storage a not released before return
   repexpose.c:40:24: Storage a becomes only
repexpose.c: (in function immut_name)
repexpose.c:51:10: Only storage im->name returned as dependent: (im->name)
repexpose.c:51:10: Function returns reference to parameter im: (im->name)
repexpose.c:51:10: Return value exposes rep of immut: (im->name)
repexpose.c: (in function abst_setIm)
repexpose.c:57:3: Undocumented modification of a->im: a->im = im
repexpose.lh:5:16: Variable globstring declared but not defined

Finished checking --- 27 code warnings, as expected
